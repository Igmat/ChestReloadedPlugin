name: CI

on:
  push:
    branches: [ master ]


defaults:
  run:
    # shell: bash
    shell: pwsh
  

jobs:
  version:
    name: Check if version update needed
    runs-on: windows-latest
    outputs:
      ref: ${{ steps.vars.outputs.ref }}
      tag: ${{ steps.changelog.outputs.tag }}
      version: ${{ steps.changelog.outputs.version }}
      skipped: ${{ steps.changelog.outputs.skipped }}
      clean_changelog: ${{ steps.changelog.outputs.clean_changelog }}

    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          token: ${{ secrets.GH_TOKEN }}

      - name: Create Changelog
        id: changelog
        uses: TriPSs/conventional-changelog-action@v3
        with:
          github-token: ${{ secrets.GH_TOKEN }}
          git-message: 'chore(release): {version}'
          git-user-name: 'Conventional Changelog Action'
          git-user-email: 'conventional_changelog@github.actions.com'
          preset: 'angular'
          tag-prefix: 'v'
          output-file: 'CHANGELOG.md'
          release-count: '10'
          version-file: './ChestReloaded/Package/manifest.json'
          version-path: 'version_number'
          skip-on-empty: 'true'
          skip-version-file: 'false'
          skip-commit: 'false'

      - name: Get release commit
        id: vars
        shell: bash
        run: echo ::set-output name=ref::$(git show-ref master -s --heads)

  build:
    name: Build Plugin
    runs-on: windows-latest
    needs: version
    if: needs.version.outputs.skipped != 'true'
    outputs:
      modid: ${{ steps.vars.outputs.modid }}
      artifact: ${{ steps.vars.outputs.artifact }}
      artifactName: ${{ steps.vars.outputs.artifactName }}

    steps:
      - name: Checkout pushed release commit
        uses: actions/checkout@v2
        with:
          ref: ${{ needs.version.outputs.ref }}

      - name: Read Config
        id: config
        uses: juliojimenez/yamler@v0
        with:
          yaml-file: unex.yml
      
      - name: Install wget
        run: choco install wget

      - name: Install SteamCMD
        uses: CyberAndrii/setup-steamcmd@v1
      
      - name: Install dotnet
        uses: actions/setup-dotnet@v1.7.2
        with:
          dotnet-version: 7.0.x

      - name: Setup Variables
        id: vars
        env:
          LC_ALL: en_US.utf8
        shell: bash
        run: |
          echo ::set-output name=artifactName::ChestReloaded release ${{ needs.version.outputs.tag }}
          echo ::set-output name=artifact::ChestReloaded_release_${{ needs.version.outputs.tag }}.zip
          echo ::set-output name=filename::${{ steps.config.outputs.filename }}.dll
          echo ::set-output name=solution::${{ steps.config.outputs.filename }}.sln
          echo ::set-output name=modid::${{ steps.config.outputs.modid }}
          echo ::set-output name=unityVersion::"2020.3.33f1"
          echo ::set-output name=unity::C:\\Program Files\\Unity\\Hub\\Editor\\2020.3.33f1\\
          echo ::set-output name=valheimversion::$(steamcmd +login anonymous +app_info_update 1 +app_info_print 896660 -beta public-test -betapassword yesimadebackups +quit | grep -Po '(?<=change number\ :\ ).*(?=, last)')
          echo ::set-output name=valheimpath::$(echo C:\\VHINSTALL)
         
      - name: Cache Unity
        id: cacheunity
        uses: actions/cache@v2
        with:
          path: ${{ steps.vars.outputs.unity }}
          key: unity-${{ hashFiles('**/lockfiles') }}
          
      - name: Install Unity
        id: unity-setup
        if: steps.cacheunity.outputs.cache-hit != 'true'
        uses: xrtk/unity-setup@v6
        with:
          build-targets: "StandaloneWindows64"
          version-file-path: "ChestReloadedUnity/ProjectSettings/ProjectVersion.txt"
          
      - name: Get Unity paths
        id: unity-paths
        run: |
          echo ::set-output name=unityEditor::"${{ env.UNITY_EDITOR_PATH }}"
          echo ::set-output name=unityProject::"${{ env.UNITY_PROJECT_PATH }}"

      - name: Activate Unity
        uses: xrtk/activate-unity-license@v2
        with:
          # Required
          username: ${{ secrets.UNITY_EMAIL }}
          password: ${{ secrets.UNITY_PASSWORD }}
          # Optional
          # serial: ${{ secrets.UNITY_SERIAL }} # Required for pro/plus activations
          license-type: 'Personal' # Chooses license type to use [ Personal, Professional ]

      - name: Configure Unity path
        uses: rvolo/xml-replace-action@v0.3
        with:
          filepath: "Environment.props"
          xpath: "//*[local-name(.)='UNITY_DIR']/text()"
          replace: "${{ steps.vars.outputs.unity }}Editor"

      - name: Cache Valheim
        id: cachevalheim
        uses: actions/cache@v2
        with:
          path: ${{ steps.vars.outputs.valheimpath }}
          key: ${{ steps.vars.outputs.valheimversion }}-${{ hashFiles('**/lockfiles') }}

      - name: Prepare Valheim dependencies
        if: steps.cachevalheim.outputs.cache-hit != 'true'
        run: |
          wget -O bepinex.zip "https://valheim.thunderstore.io/package/download/denikson/BepInExPack_Valheim/5.4.1901/"
          Expand-Archive -Path bepinex.zip -DestinationPath \BepInExRaw -Verbose
          steamcmd +login anonymous +force_install_dir ${{ steps.vars.outputs.valheimpath }} +app_update 896660 -beta public-test -betapassword yesimadebackups validate +exit
          Move-Item -Path ${{ steps.vars.outputs.valheimpath }}\valheim_server_Data\ -Destination ${{ steps.vars.outputs.valheimpath }}\valheim_Data\
          Move-Item -Path \BepInExRaw\BepInExPack_Valheim\* -Destination ${{ steps.vars.outputs.valheimpath }}

      - name: Configure Valheim path
        uses: rvolo/xml-replace-action@v0.3
        with:
          filepath: "Environment.props"
          xpath: "//*[local-name(.)='VALHEIM_INSTALL']/text()"
          replace: ${{ steps.vars.outputs.valheimpath }}
        
      - name: Build and Create the package
        run: |
          dotnet restore ChestReloaded
          dotnet build ${{ steps.vars.outputs.solution }} -c Release
          
      - name: Prepare output
        run: |
          Copy-Item -Path ChestReloaded\bin\Release\${{ steps.vars.outputs.filename }} -Destination ${{ steps.vars.outputs.artifact }}

      - name: Upload artifacts
        uses: actions/upload-artifact@v2
        with:
          name: ${{ steps.vars.outputs.artifactName }}
          path: ${{ steps.vars.outputs.artifact }}

  ghupload:
    name: Create GitHub Release
    runs-on: windows-latest
    needs: [version, build]
    if: needs.version.outputs.skipped != 'true'

    steps:
      - name: Download artifact
        uses: actions/download-artifact@v2
        id: download
        with:
          name: ${{ needs.build.outputs.artifactName }}

      - name: Release
        uses: ncipollo/release-action@v1
        with:
          tag: ${{ needs.version.outputs.tag }}
          name: Valheim Plugin ${{ needs.version.outputs.tag }}
          body: ${{ needs.version.outputs.clean_changelog }}
          artifacts: ${{ steps.download.outputs.download-path }}/${{ needs.build.outputs.artifact }}
          token: ${{ secrets.github_token }}

  nexusupload:
    name: Upload to Nexus Mods
    runs-on: windows-latest
    needs: [version, build]
    if: needs.version.outputs.skipped != 'true'
    env:
      secretsAreSet: ${{ secrets.UNEX_API_KEY && secrets.UNEX_COOKIES }}

    steps:
      - name: Checkout for restoring tools
        if: env.secretsAreSet
        uses: actions/checkout@v2

      - name: Download artifact
        if: env.secretsAreSet
        uses: actions/download-artifact@v2
        id: download
        with:
          name: ${{ needs.build.outputs.artifactName }}

      - name: Setup dotnet for tools
        if: env.secretsAreSet
        uses: actions/setup-dotnet@v1.7.2
        with:
          dotnet-version: '3.1.x'

      - name: Restore tools
        if: env.secretsAreSet
        run: dotnet tool restore

      - name: Upload
        if: env.secretsAreSet
        run: >
          dotnet unex upload
          ${{ needs.build.outputs.modid }}
          ${{ steps.download.outputs.download-path }}/${{ needs.build.outputs.artifact }}
          -v ${{ needs.version.outputs.version }}

          dotnet unex changelog
          ${{ needs.version.outputs.version }}
          "$CHANGELOG_BODY"
          -m ${{ needs.build.outputs.modid }}
        env:
          UNEX_DEBUG: true
          UNEX_APIKEY: ${{ secrets.UNEX_API_KEY }}
          UNEX_COOKIES: ${{ secrets.UNEX_COOKIES }}
          CHANGELOG_BODY: "${{ needs.version.outputs.clean_changelog }}"
